AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Stack for provisioning our API

Parameters:
  pServiceName:
    Description: The service name
    Type: String
  pVpcId:
    Description: VPC where the resources will be created.
    Type: AWS::EC2::VPC::Id
  pPrivateSubnetA:
    Description: ID of the private subnet A
    Type: AWS::EC2::Subnet::Id
  pPrivateSubnetB:
    Description: ID of the private subnet B
    Type: AWS::EC2::Subnet::Id
  pPrivateSubnetC:
    Description: ID of the private subnet C
    Type: AWS::EC2::Subnet::Id
  pImageTag:
    Description: The image tag used to run the container
    Type: String
  pEventBusName:
    Description: The name of the event bus
    Type: String
  pEventBusArn:
    Description: The ARN of the event bus
    Type: String
  pEcsClusterName:
    Description: The ECS cluster name
    Type: String
  pEcsSecurityGroupId:
    Description: The security group ID to allow inbound access to a container
    Type: AWS::EC2::SecurityGroup::Id
  pLoadBalancerListenerArn:
    Description: The ARN of the load balancer listener
    Type: String

Resources:
  InventoryServiceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pServiceName}-task-execution-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  InventoryServiceTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pServiceName}-task-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${pServiceName}-task-role-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: events:*
                Resource: !Ref pEventBusArn
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt InventoryServiceLogGroup.Arn

  ApplicationLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: alb-target-group
      VpcId: !Ref pVpcId
      Protocol: HTTPS
      Port: 3001
      HealthCheckTimeoutSeconds: 3
      HealthCheckIntervalSeconds: 5
      HealthyThresholdCount: 2
      HealthCheckPath: /inventory/health/status
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 5

  ApplicationLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ApplicationLoadBalancerTargetGroup
    Properties:
      Actions:
        - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values: ['/inventory/*']
      ListenerArn: !Ref pLoadBalancerListenerArn
      Priority: 1

  InventoryServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${pServiceName}

  InventoryServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref InventoryServiceExecutionRole
      TaskRoleArn: !Ref InventoryServiceTaskRole
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc # must be set for fargate
      ContainerDefinitions:
        - Name: !Sub ${pServiceName}-container
          Image: !Ref pImageTag
          MemoryReservation: 256
          Memory: 512
          PortMappings:
            - ContainerPort: 3001 # port mapping
              Protocol: tcp
          Environment:
            - Name: EVENT_SOURCE
              ## Static variables like these might have to be pulled in from SSM or injected in by CI/CD due to the lack of variable support in SAM.
              Value: services.events.inventory-service.v1
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: PLATFORM_SERVICES_EVENT_BUS_ARN
              Value: !Ref pEventBusArn
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref InventoryServiceLogGroup
              awslogs-stream-prefix: ecs

  # ECS Service
  InventoryECSService:
    Type: AWS::ECS::Service
    Properties:
      LaunchType: FARGATE
      ServiceName: !Ref pServiceName
      Cluster: !Ref pEcsClusterName
      TaskDefinition:
        Ref: InventoryServiceTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref pEcsSecurityGroupId
          Subnets:
            - !Ref pPrivateSubnetA
            - !Ref pPrivateSubnetB
            - !Ref pPrivateSubnetC
      LoadBalancers:
        - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
          ContainerPort: 3001
          ContainerName: !Sub ${pServiceName}-container

Outputs:
  oEcsServiceName:
    Description: ECS Service name
    Value: !GetAtt InventoryECSService.Name