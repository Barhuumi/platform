name: inventory-service

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - services/inventory/**
      - .github/workflows/inventory-service-e2e.yaml

defaults:
  run:
    working-directory: services/inventory

env:
  STACK_NAME: inventory-service
  ECR_REPOSITORY_NAME: inventory-service-repository
  AWS_REGION: eu-west-2
  SAM_TEMPLATE: template.yaml
  ## deployment pipeline user
  PIPELINE_USER_AWS_ACCESS_KEY_ID: ${{ secrets.PIPELINE_USER_AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_AWS_SECRET_ACCESS_KEY: ${{ secrets.PIPELINE_USER_AWS_SECRET_ACCESS_KEY }}
  ## deployment pipeline execution role
  PIPELINE_EXECUTION_ROLE_DEV: ${{ secrets.PIPELINE_EXECUTION_ROLE_DEV }}
  PIPELINE_EXECUTION_ROLE_UAT: ${{ secrets.PIPELINE_EXECUTION_ROLE_UAT }}
  PIPELINE_EXECUTION_ROLE_PROD: ${{ secrets.PIPELINE_EXECUTION_ROLE_PROD }}
  ## cloudformation execution role
  CLOUDFORMATION_EXECUTION_ROLE_DEV: ${{ secrets.CLOUDFORMATION_EXECUTION_ROLE_DEV }}
  CLOUDFORMATION_EXECUTION_ROLE_UAT: ${{ secrets.CLOUDFORMATION_EXECUTION_ROLE_UAT }}
  CLOUDFORMATION_EXECUTION_ROLE_PROD: ${{ secrets.CLOUDFORMATION_EXECUTION_ROLE_PROD }}
  ## artifacts bucket
  ARTIFACTS_BUCKET_DEV: ${{ secrets.ARTIFACTS_BUCKET_DEV }}
  ARTIFACTS_BUCKET_UAT: ${{ secrets.ARTIFACTS_BUCKET_UAT }}
  ARTIFACTS_BUCKET_PROD: ${{ secrets.ARTIFACTS_BUCKET_PROD }}

jobs:
  build-and-package:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v2

      # - name: Build resources
      #   run: sam build --template ${SAM_TEMPLATE} --use-container

      ## Package the dev stack
      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE_DEV }}
          role-session-name: dev-packaging
          role-duration-seconds: 900
          role-skip-session-tagging: true

      - name: SAM package and upload to the dev artifact bucket
        run: |
          sam package \
            --s3-bucket ${ARTIFACTS_BUCKET_DEV} \
            --region ${AWS_REGION} \
            --output-template-file packaged-dev.yaml

      - name: Upload artifact "packaged-dev.yaml"
        uses: actions/upload-artifact@v3
        with:
          name: packaged-dev.yaml
          path: services/inventory

      - name: Login to Amazon ECR
        id: dev-login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        id: dev-build-docker-image
        env:
          ECR_REGISTRY: ${{ steps.dev-login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG > docker-dev-image-tag.txt

      - name: Upload artifact "docker-dev-image-tag.txt"
        uses: actions/upload-artifact@v3
        with:
          name: docker-dev-image-tag.txt
          path: services/inventory/docker-dev-image-tag.txt

  deploy-dev:
    environment: dev
    needs: [build-and-package]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v2

      - name: Download artifact "packaged-dev.yaml"
        uses: actions/download-artifact@v3
        with:
          name: packaged-dev.yaml
          path: services/inventory

      - name: Download artifact "docker-dev-image-tag.txt"
        uses: actions/download-artifact@v3
        with:
          name: docker-dev-image-tag.txt
          path: services/inventory

      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE_DEV }}
          role-session-name: dev-deployment
          role-duration-seconds: 900
          role-skip-session-tagging: true

      - name: Deploy to dev account
        run: |  
          sam deploy --stack-name ${STACK_NAME} \
            --template packaged-dev.yaml \
            --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
            --region ${AWS_REGION} \
            --s3-bucket ${ARTIFACTS_BUCKET_DEV} \
            --no-fail-on-empty-changeset \
            --role-arn ${CLOUDFORMATION_EXECUTION_ROLE_DEV} \
            --parameter-overrides \
                pEnvironment=dev \
                pImageTag=`cat docker-dev-image-tag.txt` \
            --tags \
                BUILD_COMMIT=${{ github.sha }} \
                BUILD_WORKFLOW=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # deploy-uat:
  #   environment: uat
  #   needs: [deploy-dev]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v2
  #     - uses: aws-actions/setup-sam@v2
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: packaged-uat.yaml
  #         path: services/inventory

  #     - name: Assume the uat pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
  #         role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE_UAT }}
  #         role-session-name: uat-deployment
  #         role-duration-seconds: 900
  #         role-skip-session-tagging: true

  #     - name: Deploy to uat account
  #       run: |
  #         sam deploy --stack-name ${STACK_NAME} \
  #           --template packaged-uat.yaml \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${AWS_REGION} \
  #           --s3-bucket ${ARTIFACTS_BUCKET_UAT} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${CLOUDFORMATION_EXECUTION_ROLE_UAT} \
  #           --parameter-overrides pEnvironment=uat

  # deploy-prod:
  #   environment: prod
  #   needs: [deploy-uat]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v2
  #     - uses: aws-actions/setup-sam@v2
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: packaged-prod.yaml
  #         path: services/inventory

  #     - name: Assume the prod pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
  #         role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE_PROD }}
  #         role-session-name: prod-deployment
  #         role-duration-seconds: 900
  #         role-skip-session-tagging: true

  #     - name: Deploy to production account
  #       run: |
  #         sam deploy --stack-name ${STACK_NAME} \
  #           --template packaged-prod.yaml \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${AWS_REGION} \
  #           --s3-bucket ${ARTIFACTS_BUCKET_PROD} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${CLOUDFORMATION_EXECUTION_ROLE_PROD} \
  #           --parameter-overrides pEnvironment=prod
