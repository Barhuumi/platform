# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  serverless-api

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    AllowedValues:
      - dev
      - uat
      - prod
    Type: String
    Default: dev
  ServiceName:
    Type: String
    Default: inventory-service

Mappings:
  ## Could potentailly store these in SSM?
  Environments:
    dev:
      PrivateSubnetIds:
        [
          'subnet-01a3217e90b666d42',
          'subnet-0ae1665ea7d314ad2',
          'subnet-0cb2ad6d1b8365a8b',
        ]
      VpcId: 'vpc-0d81531e452c38eeb'
    uat:
      PrivateSubnetIds:
        [
          'subnet-0d18a52c817054623',
          'subnet-039756cdd4744551d',
          'subnet-08d4791ecafcc39ed',
        ]
      VpcId: 'vpc-0fc0605dce40f48e6'
    prod:
      PrivateSubnetIds:
        ['subnet-6c92f105', 'subnet-6e66c914', 'subnet-dfb94493']
      VpcId: 'vpc-3964fd51'

## No nested files in SAM but could split some of this these resources out in a separate stack, such as the ALB provisioning and Securiity groups etc
## providing we use a single ALB with path based routing - then can have one ALB definition that we can pull into separate stacks and ECS clusters
Resources:
  InventoryServiceRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ServiceName}-repository
      ImageTagMutability: IMMUTABLE
      # LifecyclePolicy: Should set a lifecycle policy on the repositories so we can set rules to auto expire and delete old images after a certain time
      # https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html

  InventoryServiceECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ServiceName}-cluster

  # as per https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html
  InventoryServiceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ServiceName}-task-execution-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # InventoryServiceTaskDefinition:
  #   Type: AWS::ECS::TaskDefinition
  #   Properties:
  #     RequiresCompatibilities:
  #       - FARGATE
  #     ExecutionRoleArn: !Ref InventoryServiceExecutionRole
  #     Cpu: 256 # 0.25 vCPU
  #     Memory: 512 # 0.5 GB.
  #     NetworkMode: awsvpc # must be set for fargate
  #     ContainerDefinitions:
  #       - Name: !Sub ${ServiceName}-container
  #         Image: !GetAtt InventoryServiceRepository.RepositoryUri
  #         MemoryReservation: 256
  #         Memory: 512
  #         PortMappings:
  #           - ContainerPort: 3001 # port mapping
  #             Protocol: tcp

  ## ALB

  FargateApisAlbSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for the Fargate ALB inbound
      GroupName: fargate-apis-alb-sg
      SecurityGroupIngress:
        - CidrIpv6: ::/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv6 traffic'
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv4 traffic'

  ApisAlbToFargateSG:
    # Filters traffic that is allowed to go to your container. Docker port is running on 3001.
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for the Fargate ALB inbound
      GroupName: apis-alb-to-fargate-sg
      SecurityGroupIngress:
        - CidrIpv6: ::/0
          FromPort: 3001
          ToPort: 3001
          IpProtocol: TCP
          Description: 'Inbound rule for IPv6 traffic'
        - CidrIp: 0.0.0.0/0
          FromPort: 3001
          ToPort: 3001
          IpProtocol: TCP
          Description: 'Inbound rule for IPv4 traffic'

  FargateApisAlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: fargate-apis-alb-target-group
      VpcId: !FindInMap
        - Environments
        - !Ref Environment
        - VpcId
      Protocol: HTTP
      Port: 3001
      HealthCheckPath: /health/status
      TargetType: ip

  FargateApisAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: fargate-apis-alb
      Subnets: !FindInMap
        - Environments
        - !Ref Environment
        - PrivateSubnetIds
      Type: application
      SecurityGroups:
        - !GetAtt FargateApisAlbSG.GroupId

  FargateApisAlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FargateApisAlbTargetGroup
          Type: forward
      LoadBalancerArn: !Ref FargateApisAlb
      Port: 80
      Protocol: HTTP

  ## ECS Service
  InventoryECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - FargateApisAlbListener
    Properties:
      LaunchType: FARGATE
      Cluster:
        Ref: InventoryServiceECSCluster
      TaskDefinition:
        Ref: InventoryServiceTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ApisAlbToFargateSG.GroupId
          Subnets: !FindInMap
            - Environments
            - !Ref Environment
            - PrivateSubnetIds
      LoadBalancers:
        - TargetGroupArn:
            Ref: FargateApisAlbTargetGroup
          ContainerPort: 3001
          ContainerName: !Sub ${ServiceName}-container